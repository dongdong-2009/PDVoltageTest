//---------------------------------------------------------------------------
#include <windows.h>    // 安全移除USB裝置用 *要比 vcl.h 早編譯
#include <SetupAPI.h> // 安全移除USB裝置用 *要比 vcl.h 早編譯
#include <cfgmgr32.h> // 安全移除USB裝置用 *要比 vcl.h 早編譯
#include <vcl.h>
#pragma hdrstop

#include "main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TFrmMain *FrmMain;
//UI調整參數
int MouseY,memo_heigh=0,move_timeout = 0;//,VOLTAGE_TOLERANCE_RANGE=20;
bool xCapture;
float voltage;
float MAX_VOLTAGE_TOLERANCE_RANGE[5],MIN_VOLTAGE_TOLERANCE_RANGE[5];
//---------------------------------------------------------------------------
__fastcall TFrmMain::TFrmMain(TComponent* Owner)
	: TForm(Owner)
{
	EnumHID();

	zVoltageSetting[0] = plSet5V;
	zVoltageSetting[1] = plSet9V;
	zVoltageSetting[2] = plSet12V;
	zVoltageSetting[3] = plSet15V;
	zVoltageSetting[4] = plSet20V;

	zRead_AD_Voltage[0] = pl_read_5v_voltage;
	zRead_AD_Voltage[1] = pl_read_9v_voltage;
	zRead_AD_Voltage[2] = pl_read_12v_voltage;
	zRead_AD_Voltage[3] = pl_read_15v_voltage;
	zRead_AD_Voltage[4] = pl_read_20v_voltage;

	zAuto_Test[0] = pl_Auto5V;
	zAuto_Test[1] = pl_Auto9V;
	zAuto_Test[2] = pl_Auto12V;
	zAuto_Test[3] = pl_Auto15V;
	zAuto_Test[4] = pl_Auto20V;
	//
	FrmMain->OldWindowProc = WindowProc;
	FrmMain->WindowProc = MyWindowProc;
	GUID guid;
	// 註冊USB HUB裝置
	guid =StringToGUID(GUID_USB_HUB);
	g_DeviceNogification.RegisterWindowsDeviceInterfaceNotification(
		Handle,guid);

	//USB Device
	guid =StringToGUID(GUID_USB_DEVICE);
	g_DeviceNogification.RegisterWindowsDeviceInterfaceNotification(
		Handle,guid);

	//HID Device
	guid =StringToGUID(GUID_HID);
	g_DeviceNogification.RegisterWindowsDeviceInterfaceNotification(
		Handle,guid);
	//

	//ReadRegSet();
	if(FindIniFile())
		ReadInISet();

	FrmMain->Caption = APP_TITLE;
	SaveVoltageRangeSetting();
	FormResize(NULL);
}
void __fastcall TFrmMain::EnumHID(){
	HDEVINFO hDevInfo;
	SP_DEVINFO_DATA DeviceInfoData;
	DWORD i,j;
	AnsiString SS,USBPath;
	PSP_DEVICE_INTERFACE_DETAIL_DATA   pDetail   =NULL;
	GUID GUID_USB_HID =StringToGUID(GUID_HID);
	DEBUG("[ HID裝置列舉 ]");
	//--------------------------------------------------------------------------
	//   獲取設備資訊
	hDevInfo = SetupDiGetClassDevs((LPGUID)&GUID_USB_HID,
	0,   //   Enumerator
	0,
	DIGCF_PRESENT | DIGCF_DEVICEINTERFACE );
	if   (hDevInfo   ==   INVALID_HANDLE_VALUE){
		DEBUG("ERROR - SetupDiGetClassDevs()"); //   查詢資訊失敗
	}
	else{
	//--------------------------------------------------------------------------
		SP_DEVICE_INTERFACE_DATA   ifdata;
		DeviceInfoData.cbSize   =   sizeof(SP_DEVINFO_DATA);
		for (i=0;SetupDiEnumDeviceInfo(hDevInfo, i, &DeviceInfoData);i++)	//   枚舉每個USB設備
		{
			ULONG   len;
			CONFIGRET cr;
			PNP_VETO_TYPE   pnpvietotype;
			CHAR   vetoname[MAX_PATH];
			ULONG   ulStatus;
			ULONG   ulProblemNumber;
			ifdata.cbSize   =   sizeof(ifdata);
			if (SetupDiEnumDeviceInterfaces(								//   枚舉符合該GUID的設備介面
			hDevInfo,           //   設備資訊集控制碼
			NULL,                         //   不需額外的設備描述
			(LPGUID)&GUID_USB_HID,//GUID_CLASS_USB_DEVICE,                     //   GUID
			(ULONG)i,       //   設備資訊集裏的設備序號
			&ifdata))                 //   設備介面資訊
			{
				ULONG predictedLength   =   0;
				ULONG requiredLength   =   0;
				//   取得該設備介面的細節(設備路徑)
				SetupDiGetInterfaceDeviceDetail(hDevInfo,         //   設備資訊集控制碼
					&ifdata,          //   設備介面資訊
					NULL,             //   設備介面細節(設備路徑)
					0,         	      //   輸出緩衝區大小
					&requiredLength,  //   不需計算輸出緩衝區大小(直接用設定值)
					NULL);            //   不需額外的設備描述
				//   取得該設備介面的細節(設備路徑)
				predictedLength=requiredLength;
				pDetail = (PSP_INTERFACE_DEVICE_DETAIL_DATA)::GlobalAlloc(LMEM_ZEROINIT,   predictedLength);
				pDetail->cbSize   =   sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA);

				if(SetupDiGetInterfaceDeviceDetail(hDevInfo,         //   設備資訊集控制碼
					&ifdata,             //   設備介面資訊
					pDetail,             //   設備介面細節(設備路徑)
					predictedLength,     //   輸出緩衝區大小
					&requiredLength,     //   不需計算輸出緩衝區大小(直接用設定值)
					NULL))               //   不需額外的設備描述
				{
					try
					{
						char ch[512];
						for(j=0;j<predictedLength;j++)
						{
						ch[j]=*(pDetail->DevicePath+8+j);
						}
						SS=ch;
						DEBUG(SS);
					}
					catch(...)
					{
						DEBUG(SS+"列舉失敗");
					}

				}
				else
				{
					DEBUG("SetupDiGetInterfaceDeviceDetail F");
				}
			}
			else
			{
				DEBUG("SetupDiEnumDeviceInterfaces F");
			}
		}
	}
}
//---------------------------------------------------------------------------
void __fastcall TFrmMain::MyWindowProc(TMessage& Message){
	PDEV_BROADCAST_DEVICEINTERFACE pDevInf;
	AnsiString DBCC_Name;
	AnsiString DutVPID = "vid_"+AnsiString(edtVID->Text)+"&pid_"+AnsiString(edtPID->Text);

	pDevInf =(PDEV_BROADCAST_DEVICEINTERFACE)Message.LParam;

	//
	if (Message.Msg==WM_DEVICECHANGE){
		if(Message.WParam ==DBT_DEVICEARRIVAL){
			if(AnsiString(pDevInf->dbcc_name).Length()>0)
			{
				DBCC_Name =AnsiString(pDevInf->dbcc_name).LowerCase();
				if(strstr(DBCC_Name.c_str(),AnsiString(PD_BOARD_PVID).c_str()))
				{
					EnumHID();
					DEBUG("PD Test Board Is Plugins");
				}
				if(ckbAuto->Checked)
				{
					if(strstr(DBCC_Name.c_str(),DutVPID.LowerCase().c_str())&&GetTickCount()>move_timeout)
					{
						move_timeout = GetTickCount()+2000;
						btnStart->Click();
					}
				}
			}
		}
		else if(Message.WParam ==DBT_DEVICEREMOVECOMPLETE){
			DBCC_Name =AnsiString(pDevInf->dbcc_name).LowerCase();
			if(strstr(DBCC_Name.c_str(),AnsiString(PD_BOARD_PVID).c_str()))
				if(m_hid.m_online) HID_TurnOff();
			if(ckbAuto->Checked)
			{
				if(strstr(DBCC_Name.c_str(),DutVPID.LowerCase().c_str()))
				{
					for(int i=0;i < 5 ;i++)
					{
						zRead_AD_Voltage[i]->Color = clWhite;
						zRead_AD_Voltage[i]->Caption = "";
						move_timeout = GetTickCount();
					}
				}
			}
		}

	}
	// 繼續原始訊息的分派
	TFrmMain::WndProc(Message);
}
//---------------------------------------------------------------------------
bool TFrmMain::HID_TurnOn(){
	//配置HID物件
	wchar_t HID_PID[5];
	wchar_t HID_VID[5];
	wcsncpy(HID_PID,PD_BOARD_PVID+8,4);
	wcsncpy(HID_VID,PD_BOARD_PVID+17,4);
	HID_PID[4]='\0';
	HID_VID[4]='\0';

	if(m_hid.Configure(HID_PID,HID_VID,L"",L"")){
		if(!m_hid.Open()){
			MessageBox(this->Handle, _T("開啟 HID 物件失敗!"), Application->Title.t_str(), MB_ICONWARNING);
			return false;
        }
	}else{
		MessageBox(this->Handle, _T("配置 HID 物件失敗!"), Application->Title.t_str(), MB_ICONWARNING);
		return false;
	}
	HID_PID[4] = 0;
	HID_PID[4] = 0;

	return true;
}
void TFrmMain::HID_TurnOff(){
	m_hid.Close();
}
//---------------------------------------------------------------------------
void TFrmMain::Tx(AnsiString Value){
	int szTx, szCmd;
	unsigned char * cmd;
	TStringList * list;

	szTx = m_hid.GetTxBytes();
	m_or.AllocBuf(szTx);
	cmd = (unsigned char *)m_or.GetBufAddr();

	list = new TStringList();
	list->DelimitedText = Value;

	if(list->Count > szTx){
		szCmd = szTx;
	}else{
        szCmd = list->Count;
	}

	for(int i=0; i<szCmd; i++){
		list->Strings[i] = L"0x" + list->Strings[i];
		cmd[i] = list->Strings[i].ToInt();
	}

	HidD_SetOutputReport(m_hid.m_hWrite, cmd, szTx);
	UI_DisplayCmd(cmd, szTx);
}
void __fastcall TFrmMain::UI_DisplayCmd(unsigned char *pBuf, int size){
	String str, str2;
	str = _T("寫入 : ");

	for(int i=0; i<size; i++){
		if(i == 0){
			str2.printf(_T("%02X"), pBuf[i]);
		}else{
			str2.printf(_T(" %02X"), pBuf[i]);
		}

		str += str2;
	}

	DEBUG(str);
}
//---------------------------------------------------------------------------
bool TFrmMain::Rx(AnsiString Value)
{
	DWORD nBytes;
	bool bl=false;

	if(!m_ir.AllocBuf(m_hid.GetRxBytes())){
		MessageBox(NULL, _T("FAIL!"), _T("Allocate read buffer"), MB_ICONSTOP);
		return false;
	}

	if(m_ir.Read(m_hid.m_hRead)){
		if(HID_ReadReport(Value)) bl = true;
	}else{
		if(GetLastError() == ERROR_IO_PENDING){
			WaitForSingleObject(m_hid.m_hRead, 1000);
			if(GetOverlappedResult(m_hid.m_hRead, &m_ir, &nBytes, false)){
				if(HID_ReadReport(Value)) bl = true;
			}
			CancelIo(m_hid.m_hRead);
		}
	}
	return bl;
}
bool __fastcall TFrmMain::HID_ReadReport(AnsiString Value){
	String buf, buf2;
	const unsigned char *report = (const unsigned char *)m_ir.GetBufAddr();

	buf = _T("讀取 : ");

	for(int i=0; i!=m_ir.GetBufSize(); i++){
		if(i==0){
			buf2.printf(_T("%02X"), report[i]);
		}else{
			buf2.printf(_T(" %02X"), report[i]);
		}

		buf += buf2;
	}
	DEBUG(buf);

	AnsiString buf3 = AnsiString(buf.c_str());
	if(Value!="")
	{
		if(!strcmp(buf3.SubString(8,Value.Length()).c_str(),Value.c_str()))
			return true;
		else return false;
	}
	else
	{
		Rx_ValueAnalyze(buf3.SubString(8,23));
		return true;
	}
}
void TFrmMain::Rx_ValueAnalyze(AnsiString Value){
	AnsiString HexValue = Value.SubString(19,2)+Value.SubString(22,2);
	m_ADValue.printf("%.3f",float(HexToInt(HexValue))*UNIT);
	DEBUG("Voltage Value : "+m_ADValue+" V");
}
//---------------------------------------------------------------------------
void TFrmMain::Voltage_Test(AnsiString CMD)
{
	//初始化
	int step = 0;
	bool bl = true;
	DWORD timeout;
	bool bTryAgain = false;
	int numBtn = CMD.SubString(CMD.Length()-1,CMD.Length()).ToInt();
	bool bTimeInterval = atof(AnsiString(zVoltageSetting[numBtn-1]->Tag).c_str()) < voltage ? true : false;
	voltage = zVoltageSetting[numBtn-1]->Tag ;
	TPanel * pl_PN = ((TPanel *)FindComponent("plPN_"+IntToStr(numBtn)));
	TEdit * edt_Pi = ((TEdit *)FindComponent("edt_Pi"+IntToStr(numBtn)));

	zVoltageSetting[numBtn-1]->Font->Color = clWindowText;
	m_ADValue = "";
	zRead_AD_Voltage[numBtn-1]->Caption = "Test...";
	FrmMain->Refresh();
	float ADValue = 0;

	while(bl)
	{
		switch(step)
		{
			case HID_IS_ONLINE:
				if(m_hid.m_online) step = SET_VOLTAGE;
				else step = HID_TURN_ON;
				break;
			case HID_TURN_ON:
				if(HID_TurnOn()) step = SET_VOLTAGE;
				else step = HID_NOT_FIND;
				break;
			case SET_VOLTAGE:
				Tx(CMD);
				if(Rx(CMD)) step = EXECUTE_SETTING;
				break;
			case EXECUTE_SETTING:
				Tx(ExecuteVoltageSetting);
				if(Rx(ExecuteVoltageSetting))
				{
					int Delay = GetTickCount();
					if(bTimeInterval) Delay += (TIME_INTERVAL*4);
					else Delay += (TIME_INTERVAL);
					while(true)
						if(GetTickCount()> Delay) break;
					timeout = GetTickCount()+GET_VALUE_TIMEOUT_MS;
					step = READ_AD_VALUE;
				}
				break;
			case READ_AD_VALUE:
				Tx(ReadADValue);
				Rx("");
				//
				ADValue = atof(m_ADValue.c_str());
				if(pl_PN->Tag) ADValue =ADValue + edt_Pi->Text.ToDouble()/1000;
				else ADValue = ADValue - edt_Pi->Text.ToDouble()/1000;
				m_ADValue.printf("%.3f",ADValue);
				//
				if(ADValue>= MIN_VOLTAGE_TOLERANCE_RANGE[numBtn-1] && ADValue <= MAX_VOLTAGE_TOLERANCE_RANGE[numBtn-1])
					step = TEST_VOLTAGE_PASS;
				else if(GetTickCount() > timeout) step = TEST_VOLTAGE_FAIL;
				break;
			case TEST_VOLTAGE_PASS:
				zRead_AD_Voltage[numBtn-1]->Color = clLime;
				zRead_AD_Voltage[numBtn-1]->Caption = m_ADValue;
				bl =false;
				break;
			case TEST_VOLTAGE_FAIL:
				if(!bTryAgain)
				{
					bTryAgain = true;
					step = SET_VOLTAGE;
					break;
                }
				zRead_AD_Voltage[numBtn-1]->Color = clRed;
				zRead_AD_Voltage[numBtn-1]->Caption = m_ADValue;
				bl =false;
				break;
			case HID_NOT_FIND:
				zRead_AD_Voltage[numBtn-1]->Color = clRed;
				zRead_AD_Voltage[numBtn-1]->Caption = "FAIL";
				bl =false;
				break;
		}
	}
}

//---------------------------------------------------------------------------
int  TFrmMain::HexToInt(AnsiString HexStr) {//16進位轉10進位
	int iIndex, iHex, totalChar;
	TCHAR HexChar[8];

	HexStr.UpperCase(); // 把字串轉成全大寫
	_tcscpy_s(HexChar, 8, WideString(HexStr).c_bstr());
//	strcpy(HexChar, HexStr.c_str()); // 把字串轉成字元陣列
	iHex = 0;
	totalChar = HexStr.Length(); // 取得字串的長度
	for (iIndex = 0; iIndex < totalChar; iIndex++) {
		iHex <<= 4;
		if ((HexChar[iIndex] >= 0x30) && (HexChar[iIndex] <= 0x39)) {
			iHex += (HexChar[iIndex] - 0x30); // 把 0 - 9 字元轉成數字
		}
		else if ((HexChar[iIndex] >= 0x41) && (HexChar[iIndex] <= 0x46)) {
			iHex += (HexChar[iIndex] - 0x37); // ­把 A - F 字元轉成數字
		}
		else {
			iHex = 0;
			break;
		}
	}
	return iHex + HARDWARE_VOLTAGE_COMPENSATION;
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::btnStartClick(TObject *Sender)
{
	int time = GetTickCount();
	int i;
	for(i=0;i < 5 ;i++)
	{
		zRead_AD_Voltage[i]->Color = clWhite;
		zRead_AD_Voltage[i]->Caption = "";
	}
	for(i = 0;i < 5;i++)
	{
		if(zAuto_Test[i]->Caption == "V") plSet5VClick(zVoltageSetting[i]);
		if(zRead_AD_Voltage[i]->Caption == "FAIL")
		{
			for(int j =i+1;j < 5;j++)
			{
				if(zAuto_Test[j]->Caption == "V")
				{
					zRead_AD_Voltage[j]->Color = clRed;
					zRead_AD_Voltage[j]->Caption = "FAIL";
                }
			}
			break;
		}
	}
	moDebug->Lines->Add(GetTickCount()-time);
}
//---------------------------------------------------------------------------
void __fastcall TFrmMain::pl_Auto5VClick(TObject *Sender)
{
	TPanel* pl=(TPanel*)Sender;
	pl->Caption = pl->Caption == "V" ? "":"V";
}
//---------------------------------------------------------------------------
void TFrmMain::ReadRegSet()
{
	AnsiString value;
	TRegistry *reg = new TRegistry();

	try
	{
		reg->RootKey = HKEY_CURRENT_USER;
		reg->OpenKey("SOFTWARE", false);
		bool bl = reg->OpenKey("PD Voltage Test", true);
		bl = reg->OpenKey("PD Voltage Test 1.2.0", true);

		if(bl)
		{
			if(reg->ValueExists("AutoTestItem")){
				value = reg->ReadString("AutoTestItem");
				for(int i=1;i <=value.Length();i++)
					zAuto_Test[value.SubString(i,1).ToInt()-1]->Caption = "V";
			}
			else
				for(int i=0;i <5;i++)
					zAuto_Test[i]->Caption = "V";
			if(reg->ValueExists("DutPluginAutoTest")){
				value = reg->ReadString("DutPluginAutoTest");
				ckbAuto->Checked = value == 1 ? true:false;
			}
			if(reg->ValueExists("DutPidVid")){
				value = reg->ReadString("DutPidVid");
				edtVID->Text = value.SubString(5,4);
				edtPID->Text = value.SubString(14,4);
			}
			for(int i=1 ;i<=5 ;i++)
			{
				if(reg->ValueExists("VoltageToleranceRange_"+IntToStr(i))){
					value = reg->ReadString("VoltageToleranceRange_"+IntToStr(i));
					TPanel * pl = ((TPanel *)FindComponent("plPN_"+IntToStr(i)));
					pl->Caption = value.SubString(1,1);
					pl->Tag = pl->Caption=="+" ? 1:0;
					((TEdit *)FindComponent("edt_Pi"+IntToStr(i)))->Text    = value.SubString(2,value.Pos("&")-value.Pos(value.SubString(1,1))-1);
					((TEdit *)FindComponent("edt_min"+IntToStr(i)))->Text	  = value.SubString(value.Pos("&")+1,value.Pos("、")-(value.Pos("&")+1));
					((TEdit *)FindComponent("edt_max"+IntToStr(i)))->Text	  = value.SubString(value.Pos("、")+2,value.Length()-value.Pos("、"));
				}
			}
			SaveVoltageRangeSetting();
		}
		else
		{
			for(int i=0;i <5;i++)
				zAuto_Test[i]->Caption = "V";
		}
	}__finally {
		delete reg;
	}
	FrmMain->Refresh();
	FormResize(NULL);
}
void TFrmMain::SetRegVal(AnsiString numTestItem,bool AutoTest,AnsiString DutVPID){
	TRegistry *reg = new TRegistry;

	try {
		reg->RootKey = HKEY_CURRENT_USER;
		reg->OpenKey("SOFTWARE", false);
		bool bl = reg->OpenKey("PD Voltage Test", true);
		bl = reg->OpenKey("PD Voltage Test 1.2.0", true);
		AnsiString VoltageRange[5];
		for(int i =1 ;i <=5 ;i++)
			VoltageRange[i-1] =
				(((TPanel *)FindComponent("plPN_"+IntToStr(i)))->Caption == "+"?"+":"-")
				+ AnsiString(((TEdit *)FindComponent("edt_Pi"+IntToStr(i)))->Text)
				+ "&"
				+ AnsiString(((TEdit *)FindComponent("edt_min"+IntToStr(i)))->Text)
				+ "、"
				+ AnsiString(((TEdit *)FindComponent("edt_max"+IntToStr(i)))->Text);

		if(bl){
			reg->WriteString("AutoTestItem", numTestItem);
			if(edtVID->Font->Color==clBlue&&edtPID->Font->Color==clBlue)
				reg->WriteString("DutPidVid", DutVPID);
			reg->WriteString("DutPluginAutoTest", AutoTest ? "1":"0");
			reg->WriteString("VoltageToleranceRange_1",  VoltageRange[0]);
			reg->WriteString("VoltageToleranceRange_2",  VoltageRange[1]);
			reg->WriteString("VoltageToleranceRange_3", VoltageRange[2]);
			reg->WriteString("VoltageToleranceRange_4", VoltageRange[3]);
			reg->WriteString("VoltageToleranceRange_5", VoltageRange[4]);
		}
	} __finally {
		delete reg;
	}
}

void __fastcall TFrmMain::FormClose(TObject *Sender, TCloseAction &Action)
{
	AnsiString AutoTestItem = "";
	for(int i=0;i<5;i++)
		if(zAuto_Test[i]->Caption == "V") AutoTestItem += i+1;
	if(btnStart->Enabled)
		SetInIVal(AutoTestItem,ckbAuto->Checked,"vid_"+edtVID->Text+"&pid_"+edtPID->Text);
}
//---------------------------------------------------------------------------
void __fastcall TFrmMain::ckbAutoClick(TObject *Sender)
{
	pl_DutVPID->Visible = ckbAuto->Checked ? true:false;
	btnStart->Caption = ckbAuto->Checked ? "Auto Test":"Start";
}
//---------------------------------------------------------------------------
bool TFrmMain::CheckVPIDSET(TEdit * edt){
	TCHAR HexChar[8];
	if(edt->Text.Length() == 0){}
	else if(edt->Text.Length() <= 4 ){
		edt->Text = edt->Text.UpperCase();// 把字串轉成全大寫
		AnsiString pvid = edt->Text;
		_tcscpy_s(HexChar, 8, WideString(pvid).c_bstr());
		for(int j=0;j<pvid.Length();j++)
		{
			if(HexChar[j] < 0x30 || HexChar[j] > 0x39){
				if(HexChar[j] < 0x41 || HexChar[j] > 0x5A){
					edt->Font->Color = clRed;
					return false;
				}
			}
		}
	}
	else
	{
		int bb = edt->Text.Length();
		edt->Font->Color = clRed;
		return false;
	}
	if(edt->Text.Length() == 4) edt->Font->Color = clBlue;
	else edt->Font->Color = clWindowText;

	edt-> SelStart=edt-> Text.Length();
	return true;
}


void __fastcall TFrmMain::edtVIDChange(TObject *Sender)
{
	CheckVPIDSET((TEdit*)Sender);
}
//---------------------------------------------------------------------------
void __fastcall TFrmMain::FormResize(TObject *Sender)
{
	for (int i = 2; i <= 6; ++i)
		((TPanel *)FindComponent("Panel" + IntToStr(i)))->Width =Panel7->Width / 5;

	for (int i = 1; i <= 5; ++i)
	{
		TLabel * lb = ((TLabel *)FindComponent("lbRange" + IntToStr(i)));
		AnsiString TOLERANCE_RANGE ;
		TOLERANCE_RANGE.sprintf("(%.2fV ~ %.2fV)",MIN_VOLTAGE_TOLERANCE_RANGE[i-1],MAX_VOLTAGE_TOLERANCE_RANGE[i-1]);
		lb->Caption = TOLERANCE_RANGE;
		int Width = lb->Width;
		lb->Left = (zVoltageSetting[i-1]->Width /2)-(Width/2);
		lb->Top = zVoltageSetting[i-1]->Height - lb->Height;
	}
}
//---------------------------------------------------------------------------
void __fastcall TFrmMain::plSet5VClick(TObject *Sender)
{
	TPanel* pl=(TPanel*)Sender;
	zRead_AD_Voltage[pl->Hint.ToInt()]->Color = clWhite;
	zRead_AD_Voltage[pl->Hint.ToInt()]->Caption = "";
	Voltage_Test(SetVoltage[pl->Hint.ToInt()]);
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::moDebugChange(TObject *Sender)
{
	if(moDebug->Lines->Count >500) moDebug->Clear();
}
//---------------------------------------------------------------------------


void __fastcall TFrmMain::pl_Memo_SwitchClick(TObject *Sender)
{
	if(pl_Debug->Width)
	{
	   pl_Debug->Width = 0;
	   pl_Memo_Switch ->Caption =">";
	   FrmMain->Width -=280;
	}
	else
	{
	   pl_Debug->Width = 280;
	   FrmMain->Width +=280;
	   pl_Memo_Switch ->Caption ="<";
	}
	FormResize(NULL);
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::edtPassWordEnter(TObject *Sender)
{
	if(edtPassWord->Font->Color == clRed)
	{
		edtPassWord->Font->Color = clBlue;
		edtPassWord->Text 	= "";
	}
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::btnSetClick(TObject *Sender)
{
	if(btnSet->Caption == "ENTER")
	{
		if(edtPassWord->Text.UpperCase() == PASSWORD)
		{
			btnSet->Caption		 = "END";
			SetValueEnabled(true);
		}
		else edtPassWord->Font->Color = clRed;
	}
	else
	{
		if(SaveVoltageRangeSetting())
		{
			btnSet->Caption	  	= "ENTER";
			edtPassWord->Text 	= "";
			SetValueEnabled(false);
			AnsiString AutoTestItem = "";
			for(int i=0;i<5;i++)
				if(zAuto_Test[i]->Caption == "V") AutoTestItem += i+1;
			if(btnStart->Enabled)
				SetInIVal(AutoTestItem,ckbAuto->Checked,"vid_"+edtVID->Text+"&pid_"+edtPID->Text);
		}
	}
}
//---------------------------------------------------------------------------
void  TFrmMain::SetValueEnabled(bool Enabled)
{
	edtPassWord->Enabled = !Enabled;
	edtVID->Enabled = Enabled;
	edtPID->Enabled = Enabled;
	ckbAuto->Enabled = Enabled;
	for(int i=1 ; i<=5 ;i++)
	{
		TPanel  * pl   = ((TPanel *)FindComponent("pl_set_" + IntToStr(i)));
		pl->Enabled	  = Enabled;
		zVoltageSetting[i-1]->Enabled = !Enabled;

		((TEdit *)FindComponent("edt_min"+IntToStr(i)))->Enabled = Enabled;
		((TEdit *)FindComponent("edt_max"+IntToStr(i)))->Enabled = Enabled;
	}
	btnStart->Enabled = !Enabled;
	pl_Set_Switch->Enabled = !Enabled;
}


void __fastcall TFrmMain::pl_ckb1_1Click(TObject *Sender)
{
	TPanel* pl=(TPanel*)Sender;
	pl->Caption = pl->Caption == "+" ? "-":"+";
	pl->Tag = pl->Caption=="+" ? 1:0;
}
//---------------------------------------------------------------------------
void __fastcall TFrmMain::edt_Pi1Change(TObject *Sender)
{
	TEdit* edt=(TEdit*)Sender;
	edt->Font->Color = clBlue;
	TCHAR HexChar[8];
	bool bPASS = true;
	if(edt->Text.Length() == 0){
		bPASS =false;
	}
	else
	{
		edt->Text = edt->Text.UpperCase();// 把字串轉成全大寫
		_tcscpy_s(HexChar, 8, edt->Text.c_str());
		for(int j=0;j<edt->Text.Length();j++)
		{
			if(HexChar[j] < 0x30 || HexChar[j] > 0x39){
					edt->Font->Color = clRed;
					edt-> SelStart=edt-> Text.Length();
					bPASS = false;
			}
		}
	}
	if(bPASS)
	{
		FormResize(NULL);
	}

	edt-> SelStart=edt-> Text.Length();
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::edt_Pi1Exit(TObject *Sender)
{
	TEdit* edt=(TEdit*)Sender;
	if(edt->Text.Length() == 0 || edt->Font->Color == clRed){
		edt->Text = "5";
		edt->Font->Color = clBlue;
	}
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::edt_min1Change(TObject *Sender)
{
	TEdit* edt=(TEdit*)Sender;
	if(edt->Text.Length()>5)
		edt->Text = edt->Text.SubString(1,5);
	TCHAR HexChar[8];
	bool bPASS = true;
	bool bPoint = false;
	if(edt->Text.Length() == 0){
		bPASS =false;
	}
	else
	{
		edt->Text = edt->Text.UpperCase();// 把字串轉成全大寫
		_tcscpy_s(HexChar, 8, edt->Text.c_str());
		for(int j=0;j<edt->Text.Length();j++)
		{
			if(HexChar[j] < 0x30 || HexChar[j] > 0x39){
				if(HexChar[j] == 0x2E)
				{
					if(j == edt->Text.Length()-1 ||bPoint)
					{
						edt->Font->Color = clRed;
						edt-> SelStart=edt-> Text.Length();
						bPASS = false;
					}
					if(!bPoint) bPoint = true;
				}
				else
				{
					edt->Font->Color = clRed;
					edt-> SelStart=edt-> Text.Length();
					bPASS = false;
				}
			}
		}
	}
	if(bPASS)
	{
		edt->Font->Color = edt->Text.ToDouble() <= 99 ? clBlue : clRed;
		FormResize(NULL);
	}

	edt-> SelStart=edt-> Text.Length();
}
//---------------------------------------------------------------------------

void __fastcall TFrmMain::edt_min1Exit(TObject *Sender)
{
	TEdit* edt=(TEdit*)Sender;
	if(edt->Text.Length() == 0 || edt->Font->Color == clRed){
		edt->Text = AnsiString(edt->Tag)+".00";
		edt->Font->Color = clBlue;
	}
	else
	{
		AnsiString edtnum = AnsiString(edt->Text.ToDouble());
		edtnum.printf("%.2f",atof(edtnum.c_str()));
		edt->Text =  edtnum;
	}

}
//---------------------------------------------------------------------------
bool TFrmMain::SaveVoltageRangeSetting()
{
	for(int i =1;i <= 5;i++)
	{
		if(((TPanel *)FindComponent("pl_ckb"+IntToStr(i)+"_1"))->Caption == "V")
		{
			TEdit * edt = ((TEdit *)FindComponent("edt_Pi"+IntToStr(i)));
			MAX_VOLTAGE_TOLERANCE_RANGE[i-1] = edt->Tag + (edt->Tag * edt->Text.ToDouble() / 100);
			MIN_VOLTAGE_TOLERANCE_RANGE[i-1] = edt->Tag - (edt->Tag * edt->Text.ToDouble() / 100);
		}
		else
		{
			MAX_VOLTAGE_TOLERANCE_RANGE[i-1] = ((TEdit *)FindComponent("edt_max"+IntToStr(i))) ->Text.ToDouble();
			MIN_VOLTAGE_TOLERANCE_RANGE[i-1] = ((TEdit *)FindComponent("edt_min"+IntToStr(i))) ->Text.ToDouble();
			if(MIN_VOLTAGE_TOLERANCE_RANGE[i-1]>MAX_VOLTAGE_TOLERANCE_RANGE[i-1])
			{
				AnsiString ERROR_MSG = "["+AnsiString(zVoltageSetting[i-1]->Caption)+"量測電壓]最小電壓不應大於最大電壓";
				MessageBoxA(NULL,ERROR_MSG.c_str(),"ERROR", MB_ICONEXCLAMATION);
				return false;
			}
		}
	}
	FormResize(NULL);
	return true;
}

void __fastcall TFrmMain::pl_Set_SwitchClick(TObject *Sender)
{
	if(pl_Set->Height)
	{
	   pl_Set->Height = 0;
	   pl_Set_Switch ->Caption ="v";
	   FrmMain->Height -=245;
	}
	else
	{
	   pl_Set->Height = 245;
	   FrmMain->Height +=245;
	   pl_Set_Switch ->Caption ="^";
	}
	FormResize(NULL);
}
//---------------------------------------------------------------------------
void TFrmMain::Delay(ULONG iMilliSeconds) // 原版delay time 用在thread裡面
{
	ULONG iStart;
	iStart = GetTickCount();
	while (GetTickCount() - iStart <= iMilliSeconds)
		Application->ProcessMessages();
}
bool TFrmMain::FindIniFile()
{
	TSearchRec Sr;
	TStringList*FileList=new TStringList();
	if(FindFirst("*.ini",faAnyFile,Sr)==0)
	{
		do
		{
			FileList->Add(Sr.Name);
		}
		while(FindNext(Sr)==0);
		FindClose(Sr);
	}
	if(FileList->Count>1||FileList->Count==0)
	{
		delete FileList;
		plIniName->Font->Color = clRed;
		return false;
	}
	else
	{
		FILE_DUT_SET_INI = FileList->Strings[0];
		if(FILE_DUT_SET_INI.Length()>12)
			plIniName->Caption = FILE_DUT_SET_INI.SubString(8,FILE_DUT_SET_INI.Length()-11);
		delete FileList;
		return true;
	}
}
bool TFrmMain::ReadInISet()
{
	AnsiString value;
	value = Findfilemsg(FILE_DUT_SET_INI,"[AutoTestItem]",1);
	for(int i=1;i <=value.Length();i++)
		zAuto_Test[value.SubString(i,1).ToInt()-1]->Caption = "V";
	//
	value = Findfilemsg(FILE_DUT_SET_INI,"[DutPluginAutoTest]",1);
	ckbAuto->Checked = value == 1 ? true:false;
	//
	value = Findfilemsg(FILE_DUT_SET_INI,"[DutPidVid]",1);
	edtVID->Text = value.SubString(5,4);
	edtPID->Text = value.SubString(14,4);
	//
	for(int i=1 ;i<=5 ;i++)
	{
		value = Findfilemsg(FILE_DUT_SET_INI,"[VoltageToleranceRange_"+IntToStr(i)+"]",1);
		TPanel * pl = ((TPanel *)FindComponent("plPN_"+IntToStr(i)));
		pl->Caption = value.SubString(1,1);
		pl->Tag = pl->Caption=="+" ? 1:0;
		((TEdit *)FindComponent("edt_Pi"+IntToStr(i)))->Text    = value.SubString(2,value.Pos("&")-value.Pos(value.SubString(1,1))-1);
		((TEdit *)FindComponent("edt_min"+IntToStr(i)))->Text	  = value.SubString(value.Pos("&")+1,value.Pos("、")-(value.Pos("&")+1));
		((TEdit *)FindComponent("edt_max"+IntToStr(i)))->Text	  = value.SubString(value.Pos("、")+2,value.Length()-value.Pos("、"));
	}
	//
	return true;
}
bool TFrmMain::SetInIVal(AnsiString numTestItem,bool AutoTest,AnsiString DutVPID){

	AnsiString VoltageRange[5];
	for(int i =1 ;i <=5 ;i++)
			VoltageRange[i-1] =
				(((TPanel *)FindComponent("plPN_"+IntToStr(i)))->Caption == "+"?"+":"-")
				+ AnsiString(((TEdit *)FindComponent("edt_Pi"+IntToStr(i)))->Text)
				+ "&"
				+ AnsiString(((TEdit *)FindComponent("edt_min"+IntToStr(i)))->Text)
				+ "、"
				+ AnsiString(((TEdit *)FindComponent("edt_max"+IntToStr(i)))->Text);


	fstream fp;
	fp.open(FILE_DUT_SET_INI.c_str(), ios::out); // 開啟檔案
	fp << "[AutoTestItem]" << endl;
	fp << numTestItem.c_str() << endl;
	fp << "[DutPluginAutoTest]" << endl;
	if(AutoTest) fp << "1" << endl;
	else fp << "0" << endl;
	fp << "[DutPidVid]" << endl;
	if(edtVID->Font->Color==clBlue&&edtPID->Font->Color==clBlue)
		fp << DutVPID.c_str() << endl;
	fp << "[VoltageToleranceRange_1]" << endl;
	fp << VoltageRange[0].c_str() << endl;
	fp << "[VoltageToleranceRange_2]" << endl;
	fp << VoltageRange[1].c_str() << endl;
	fp << "[VoltageToleranceRange_3]" << endl;
	fp << VoltageRange[2].c_str() << endl;
	fp << "[VoltageToleranceRange_4]" << endl;
	fp << VoltageRange[3].c_str() << endl;
	fp << "[VoltageToleranceRange_5]" << endl;
	fp << VoltageRange[4].c_str() << endl;

	fp.close(); // 關閉檔案
}
AnsiString TFrmMain::Findfilemsg(AnsiString filename, AnsiString findmsg,
	int rownum) { // 找檔案找到字串行回傳幾行後的字串
	ifstream lanfile(filename.c_str());
	std::string filemsg;
	if (lanfile.is_open()) {
		while (!lanfile.eof()) {
			getline(lanfile, filemsg);
			if (strstr(filemsg.c_str(), findmsg.c_str())) {
				for (int i = 0; i < rownum; i++)
					getline(lanfile, filemsg);
				lanfile.close();
				return(AnsiString)filemsg.c_str();
			}
		}
		lanfile.close();
		return NULL;
	}
	else
		return "FAIL";
}

void __fastcall TFrmMain::edtPassWordKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
	if(Key==13)
		btnSet->Click();
	else
		edtPassWord->Font->Color = clBlue;
}
//---------------------------------------------------------------------------

